{"project": "pgmpy", "project_url": "http://pgmpy.org/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"3515": "9381a66aba3c3871d3ccd00672b148d17d63239e", "3798": "d030b40847e4494a21c5a14e7a08d19a56497319", "3878": "a3a544694f55105208ae5edc1decd64be9ea913a", "3990": "588c04df1865eb08ffd0de7098420a7e6a79e87f", "4120": "e6bf207db053e9fd7eabc8d4d4e7f45a7483def4", "4153": "409bc6d58c78c77c2af46869d47b766e6dc7c3d8", "4190": "afdcf6dfed299517345113298a67c7be23cbd557", "4367": "564cd7ce1f4c42918b36365ecf6cdf60dd7ec7a0", "4523": "4a0c160626d703ea7ae9cd4ed40119ecc7df25b6", "4544": "e60329795854f90e7d1d6c5f7884fd8babe47e2e", "4571": "4ee16682c64832d34981d9437c8e5bb3301a80be", "4609": "c641acd1adcd976c3327d7d1d955d0da7f6af811", "4671": "9e25afb473a6d81e23fc1f71f618e9ee92076974", "4686": "55709c6ba50662bb996a0bd3dd19f7f414fafae1", "4740": "93cebd73b1a1cacbb9d942073979488f8dc40c93", "4746": "612dbd7ec9723c66b976462d5b95c59c393a28f9", "4748": "381e1b29c7a40cdcc96252e33284b9c662795e81", "4749": "ff81007e41ec1771145adf0269dd898f89371259", "4751": "bf536066b5dcd2b8c7aaf7f27c3ab239e6ea0f10", "4752": "ff551a95fdb15f6137c28d09dc5ca89c3322cfed", "4753": "697601e9891e20ff61c31846becba67a4d36ee3b", "4755": "18340be509163dc5b61c7cf5407882fba006b6d5", "4756": "2affed7d7089259497503ef480b9f72ad66603e0", "4757": "55ef1994ac58b9c79f766a9903595764165148b7", "4761": "4bbcebeed879173a690fa6d78451e33be3d1efe3", "4764": "1e73ff22236f28e0fae1ea86fed129c8141fc0a8", "4770": "c14e71a78dd57df1b454b09cee5227c90efa3f3f", "4771": "b9e7b2f4d065af21aeb8757fabba06d0bf715e5d", "4773": "37244c2aca8a06579bd48bff88aef9afea6874d2", "4777": "89cf9defa768b79d4b63325a9f22704a367b05fc", "4783": "b443ddd1a1bd82e2635c482b272b057e4b8c0ece", "4785": "22cc3211db97084c5706411e33a8191b5ec10015", "4787": "e77e9fd8638612bd8ee2a44e51e57e087c410673", "4788": "8eefba1f9493e1d5fdd3be4760486fbbd4c508de", "4792": "2cf48d0cb59b9830f0132536272237eff708f23d", "4794": "6a5525a82e7ae177efe031814bcc778ce35d78ac", "4795": "7a2a1a7aacbf1d1c83e4523a7b65c5c08658d6e6", "4798": "89d0a3e8674769ee58572be11ab11b7704158498", "4802": "9de4798ee754155b3bc139d5f743702898748312", "4810": "f6dfa0dc7d7d121f9e4a1ab08f7b9de13ff93be7", "4811": "2d7e9bff21fb8bc7fc0f71f9578d4a544905cd94", "4815": "4c9085ad012198b63ade5afa36eb275f32580e2d", "4819": "b6e29c0d8653934c9f7b900282de17f658df9c4e", "4837": "41c7cb705486bc8d7f75cf0cfce612b2ce52dd15", "4843": "6d66bde4c7f140ba14892174c59370b2b7964e90", "4847": "796e701577be2cd52f4b39e5cd44df5c4af4295b", "4851": "bef3986a1838ca3e67b1cea4ca79004076751c77", "4855": "ad0c732e9341ad6cbade58044729cfb400091197", "4857": "ecdfe2f5f262ea52b85f10a8923dd6075727f5a0", "4859": "a8d7e4dc0b87be4c244f718722cb74e0e61ffaf0"}, "revision_to_date": {"3515": 1555700705000, "3798": 1573292152000, "3878": 1579694518000, "3990": 1593520345000, "4120": 1601472226000, "4153": 1609335669000, "4190": 1617176515000, "4367": 1625044326000, "4523": 1633016406000, "4544": 1640904847000, "4571": 1648665920000, "4609": 1656580907000, "4671": 1664524884000, "4686": 1672482988000, "4740": 1678585386000, "4746": 1680933737000, "4748": 1680940293000, "4749": 1681482654000, "4751": 1681504726000, "4752": 1681793307000, "4753": 1681987182000, "4755": 1683534989000, "4756": 1683538723000, "4757": 1683539284000, "4761": 1684179222000, "4764": 1684301083000, "4770": 1687341754000, "4771": 1688135834000, "4773": 1688717184000, "4777": 1688888431000, "4783": 1689688317000, "4785": 1689784101000, "4787": 1689822182000, "4788": 1690352904000, "4792": 1690363357000, "4794": 1690454451000, "4795": 1690456929000, "4798": 1692270150000, "4802": 1692618536000, "4810": 1692876727000, "4811": 1692878395000, "4815": 1693042793000, "4819": 1693064156000, "4837": 1693411163000, "4843": 1693589750000, "4847": 1694079081000, "4851": 1694199501000, "4855": 1694697548000, "4857": 1694700716000, "4859": 1694765547000}, "params": {"arch": ["x86_64"], "cpu": ["AMD Ryzen 9 7950X 16-Core Processor"], "machine": ["7950x"], "num_cpu": ["32"], "os": ["Linux 6.2.0-32-generic"], "ram": ["31958208"], "python": ["3.10", "3.11", "3.7", "3.8", "3.9"], "branch": ["dev"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.9", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.11", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.10", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.7", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.8", "branch": "dev"}], "benchmarks": {"factor.TimeDiscreteFactor.time_factor_compare": {"code": "class TimeDiscreteFactor:\n    def time_factor_compare(self):\n        self.phi_large == self.phi_large\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_compare", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "95feb42df85ffe5cf519cf4af677309a5cdb891db99ad54b655196c3e1f2e13a", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_marginalize": {"code": "class TimeDiscreteFactor:\n    def time_factor_marginalize(self):\n        self.phi_large.marginalize([4, 5, 8], inplace=False)\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_marginalize", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a3ae79cdcf3bcd4bc49df94b3b3d5f93c4126249a9b3cf2481ac381ee836f851", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_multiply_large": {"code": "class TimeDiscreteFactor:\n    def time_factor_multiply_large(self):\n        phi = self.phi_large * self.phi_large\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_multiply_large", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cfb6b66fddb2953948ffb6566ae101535dd1e8d0fd9af855331f39ef905f4450", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_reduce": {"code": "class TimeDiscreteFactor:\n    def time_factor_reduce(self):\n        self.phi_large.reduce([(3, 0), (6, 1)], inplace=False)\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_reduce", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cb3858b638914f7572792153a60efb4aecbde56d5abf039791451adb0f26c263", "warmup_time": -1}, "import.TimeImport.time_import": {"code": "class TimeImport:\n    def time_import(self):\n        import pgmpy", "min_run_count": 2, "name": "import.TimeImport.time_import", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "b8454f897532cbfc3dc91dd442b9d4429c7671f8720779f25b6975fed7999d6c", "warmup_time": -1}, "inference.TimeBeliefPropagation.time_query_alarm": {"code": "class TimeBeliefPropagation:\n    def time_query_alarm(self):\n        infer = BeliefPropagation(self.alarm)\n        infer.query(variables=['VENTLUNG'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')", "min_run_count": 2, "name": "inference.TimeBeliefPropagation.time_query_alarm", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "6680f8e9b1d1b599be3036d23a934dfdc9403b143056adb5edc9ccbe1dec7caa", "warmup_time": -1}, "inference.TimeVariableElimination.time_query_alarm": {"code": "class TimeVariableElimination:\n    def time_query_alarm(self):\n        infer = VariableElimination(self.alarm)\n        infer.query(variables=['VENTLUNG', 'VENTALV', 'ARTCO2', 'CATECHOL'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "inference.TimeVariableElimination.time_query_alarm", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4f4aca0c4d029f458791f2444cae6bacf18251d2d465b1cc3492e4e32c07beec", "warmup_time": -1}, "inference.TimeVariableElimination.time_query_munin": {"code": "class TimeVariableElimination:\n    def time_query_munin(self):\n        infer = VariableElimination(self.munin)\n        infer.query(variables=['L_LNLC8_ADM_MALOSS', 'L_LNLLP_ADM_MALOSS', 'L_LNLC8_LP_ADM_MALOSS', 'L_LNLE_ADM_MALOSS'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "inference.TimeVariableElimination.time_query_munin", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "3c25bd77115999cfba0644b479e5b10cea7897bdaa8f985e5dfa2b24c8c34ee0", "warmup_time": -1}, "parameter_learning.TimeBayesianEstimator.time_alarm_bayesian_estimator": {"code": "class TimeBayesianEstimator:\n    def time_alarm_bayesian_estimator(self):\n        self.alarm_est.get_parameters()\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.alarm_model = BayesianNetwork(self.alarm.edges())\n        self.alarm_est = BayesianEstimator(self.alarm_model, self.alarm.simulate(int(1e4), show_progress=False))\n    \n        self.munin = get_example_model('munin1')\n        self.munin_model = BayesianNetwork(self.munin.edges())\n        self.munin_est = BayesianEstimator(self.munin_model, self.munin.simulate(int(1e4), show_progress=False))", "min_run_count": 2, "name": "parameter_learning.TimeBayesianEstimator.time_alarm_bayesian_estimator", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "106af0208af2afb3d7f371b0c64176d86ce0c835aa02a8beddfb59256c6623a6", "warmup_time": -1}, "parameter_learning.TimeBayesianEstimator.time_munin_bayesian_estimator": {"code": "class TimeBayesianEstimator:\n    def time_munin_bayesian_estimator(self):\n        self.munin_est.get_parameters()\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.alarm_model = BayesianNetwork(self.alarm.edges())\n        self.alarm_est = BayesianEstimator(self.alarm_model, self.alarm.simulate(int(1e4), show_progress=False))\n    \n        self.munin = get_example_model('munin1')\n        self.munin_model = BayesianNetwork(self.munin.edges())\n        self.munin_est = BayesianEstimator(self.munin_model, self.munin.simulate(int(1e4), show_progress=False))", "min_run_count": 2, "name": "parameter_learning.TimeBayesianEstimator.time_munin_bayesian_estimator", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 1200, "type": "time", "unit": "seconds", "version": "373f9e1e0851fac0c2f2ddd3d57b349e107851ad63aca3348a58089dc3435cec", "warmup_time": -1}, "parameter_learning.TimeExpectationMaximization.time_alarm_em": {"code": "class TimeExpectationMaximization:\n    def time_alarm_em(self):\n        self.alarm_est.get_parameters()\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.alarm_model = BayesianNetwork(self.alarm.edges())\n        self.alarm_est = ExpectationMaximization(self.alarm_model, self.alarm.simulate(int(1e4), show_progress=False))\n    \n        self.munin = get_example_model('munin1')\n        self.munin_model = BayesianNetwork(self.munin.edges())\n        self.munin_est = ExpectationMaximization(self.munin_model, self.munin.simulate(int(1e4), show_progress=False))", "min_run_count": 2, "name": "parameter_learning.TimeExpectationMaximization.time_alarm_em", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "1a6a6614c0eafcd32e0ee0b7739885def047daa4e34928c375836888ee06b288", "warmup_time": -1}, "parameter_learning.TimeExpectationMaximization.time_munin_em": {"code": "class TimeExpectationMaximization:\n    def time_munin_em(self):\n        self.munin_est.get_parameters()\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.alarm_model = BayesianNetwork(self.alarm.edges())\n        self.alarm_est = ExpectationMaximization(self.alarm_model, self.alarm.simulate(int(1e4), show_progress=False))\n    \n        self.munin = get_example_model('munin1')\n        self.munin_model = BayesianNetwork(self.munin.edges())\n        self.munin_est = ExpectationMaximization(self.munin_model, self.munin.simulate(int(1e4), show_progress=False))", "min_run_count": 2, "name": "parameter_learning.TimeExpectationMaximization.time_munin_em", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "ad9277dacc6234e1b5f25f548c63afd1dbd4ba62c74b7ce13c67339dad05d86d", "warmup_time": -1}, "parameter_learning.TimeMLE.time_alarm_mle": {"code": "class TimeMLE:\n    def time_alarm_mle(self):\n        self.alarm_est.get_parameters()\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.alarm_model = BayesianNetwork(self.alarm.edges())\n        self.alarm_est = MaximumLikelihoodEstimator(self.alarm_model, self.alarm.simulate(int(1e4), show_progress=False))\n    \n        self.munin = get_example_model('munin1')\n        self.munin_model = BayesianNetwork(self.munin.edges())\n        self.munin_est = MaximumLikelihoodEstimator(self.munin_model, self.munin.simulate(int(1e4), show_progress=False))", "min_run_count": 2, "name": "parameter_learning.TimeMLE.time_alarm_mle", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "1674d8d67071c6958371be05e00ec82a462da24cc714d710f2b5cc1fb90ea86d", "warmup_time": -1}, "parameter_learning.TimeMLE.time_munin_mle": {"code": "class TimeMLE:\n    def time_munin_mle(self):\n        self.munin_est.get_parameters()\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')\n        self.alarm_model = BayesianNetwork(self.alarm.edges())\n        self.alarm_est = MaximumLikelihoodEstimator(self.alarm_model, self.alarm.simulate(int(1e4), show_progress=False))\n    \n        self.munin = get_example_model('munin1')\n        self.munin_model = BayesianNetwork(self.munin.edges())\n        self.munin_est = MaximumLikelihoodEstimator(self.munin_model, self.munin.simulate(int(1e4), show_progress=False))", "min_run_count": 2, "name": "parameter_learning.TimeMLE.time_munin_mle", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "19b4acbbef089493e92bc85c98d526d42e1b11aaa0db75a32bebd3e9b4f7b696", "warmup_time": -1}, "readwrite.TimeRead.time_asia_read": {"code": "class TimeRead:\n    def time_asia_read(self):\n        get_example_model('asia')\n\n    def setup(self):\n        self.asia = get_example_model('asia')\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "readwrite.TimeRead.time_asia_read", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "81a84aadaa660241bcce75ef7fc72566a85d53357f72a2f1481a4901b3740c9e", "warmup_time": -1}, "readwrite.TimeRead.time_asia_write": {"code": "class TimeRead:\n    def time_asia_write(self):\n        BIFWriter(self.asia).write_bif('\\tmp')\n\n    def setup(self):\n        self.asia = get_example_model('asia')\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "readwrite.TimeRead.time_asia_write", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4fcc08fefc4ea27f29cea42c077566e613309ab79e37b4852224d6234b582972", "warmup_time": -1}, "readwrite.TimeRead.time_munin_read": {"code": "class TimeRead:\n    def time_munin_read(self):\n        get_example_model('munin')\n\n    def setup(self):\n        self.asia = get_example_model('asia')\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "readwrite.TimeRead.time_munin_read", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "71c1b55c02daa34fc636a40052442c018eec2111a6295cfffcd5208bac106250", "warmup_time": -1}, "readwrite.TimeRead.time_munin_write": {"code": "class TimeRead:\n    def time_munin_write(self):\n        BIFWriter(self.munin).write_bif('\\tmp')\n\n    def setup(self):\n        self.asia = get_example_model('asia')\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "readwrite.TimeRead.time_munin_write", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "0ee83c4ab70f51ff1ce38f841012954be483344c42c2115b1d765dc83317190c", "warmup_time": -1}, "sampling.TimeSampling.time_forward_sample": {"code": "class TimeSampling:\n    def time_forward_sample(self):\n        self.model.simulate(n_samples=int(1e4), show_progress=False)\n\n    def setup(self):\n        self.model = get_example_model('alarm')\n        self.s = BayesianModelSampling(self.model)", "min_run_count": 2, "name": "sampling.TimeSampling.time_forward_sample", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600.0, "type": "time", "unit": "seconds", "version": "35b4d4940e380f94846369d5ba08b91efdeecfee726e8395f3e3fc210524a94e", "warmup_time": -1}, "structure_learning.TimeHillClimbAlarmModel.time_hillclimb": {"code": "class TimeHillClimbAlarmModel:\n    def time_hillclimb(self):\n        self.est.estimate(max_indegree=4, scoring_method=self.scoring_method, max_iter=int(1e4))\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e4), seed=42, show_progress=False)\n        self.scoring_method = K2Score(samples)\n        self.est = HillClimbSearch(data=samples)", "min_run_count": 2, "name": "structure_learning.TimeHillClimbAlarmModel.time_hillclimb", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600.0, "type": "time", "unit": "seconds", "version": "cd1e5e2c19100a1cd0eec909cb3dbe734f037488bca448673de5f8ae438ead8c", "warmup_time": -1}, "structure_learning.TimePCAlarmModel.time_pc_orig": {"code": "class TimePCAlarmModel:\n    def time_pc_orig(self):\n        self.est.estimate(variant='orig')\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e4), seed=42, show_progress=False)\n        self.est = PC(samples)", "min_run_count": 2, "name": "structure_learning.TimePCAlarmModel.time_pc_orig", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600.0, "type": "time", "unit": "seconds", "version": "bccd0e25da5679e44fe8544e41ae2ed7cae86d57c027383171f89f1ab81aeb7d", "warmup_time": -1}, "structure_learning.TimePCAlarmModel.time_pc_stable": {"code": "class TimePCAlarmModel:\n    def time_pc_stable(self):\n        self.est.estimate(variant='stable')\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e4), seed=42, show_progress=False)\n        self.est = PC(samples)", "min_run_count": 2, "name": "structure_learning.TimePCAlarmModel.time_pc_stable", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600.0, "type": "time", "unit": "seconds", "version": "aa7de744d5d0e962bfde31360e911bec11432052fae1a9bc185681c057f0a7b5", "warmup_time": -1}, "structure_learning.TimeTreeSearchAlarmModel.time_tan": {"code": "class TimeTreeSearchAlarmModel:\n    def time_tan(self):\n        self.est.estimate(estimator_type=\"tan\", class_node=\"HISTORY\", show_progress=False)\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e4), show_progress=False)\n        self.est = TreeSearch(samples)", "min_run_count": 2, "name": "structure_learning.TimeTreeSearchAlarmModel.time_tan", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600.0, "type": "time", "unit": "seconds", "version": "c66ced109919424a10f47cba1f9fc2900b657c48a9e239ee81719efa5cc570d5", "warmup_time": -1}}, "machines": {"7950x": {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "version": 1}}, "tags": {"v0.1.8": 3515, "v0.1.9": 3798, "v0.1.10": 3878, "v0.1.11": 3990, "v0.1.12": 4120, "v0.1.13": 4153, "v0.1.14": 4190, "v0.1.15": 4367, "v0.1.16": 4523, "v0.1.17": 4544, "v0.1.18": 4571, "v0.1.19": 4609, "v0.1.20": 4671, "v0.1.21": 4686, "v0.1.22": 4746, "v0.1.23": 4771}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}