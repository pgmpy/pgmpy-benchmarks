{"project": "pgmpy", "project_url": "http://pgmpy.org/", "show_commit_url": "#", "hash_length": 8, "revision_to_hash": {"3515": "9381a66aba3c3871d3ccd00672b148d17d63239e", "3798": "d030b40847e4494a21c5a14e7a08d19a56497319", "3878": "a3a544694f55105208ae5edc1decd64be9ea913a", "3990": "588c04df1865eb08ffd0de7098420a7e6a79e87f", "4120": "e6bf207db053e9fd7eabc8d4d4e7f45a7483def4", "4153": "409bc6d58c78c77c2af46869d47b766e6dc7c3d8", "4190": "afdcf6dfed299517345113298a67c7be23cbd557", "4367": "564cd7ce1f4c42918b36365ecf6cdf60dd7ec7a0", "4523": "4a0c160626d703ea7ae9cd4ed40119ecc7df25b6", "4544": "e60329795854f90e7d1d6c5f7884fd8babe47e2e", "4571": "4ee16682c64832d34981d9437c8e5bb3301a80be", "4572": "a314c6dcf24f98c5bf59258acfe8c61639365a24", "4576": "d9f0d2def51d02fff2047b3cb674fd4192c87cde", "4578": "41c04fc20f737cf915b9eaea599f4ee2a4094394", "4581": "ac00cba4b3ef1e5519f260a2062c04d76dc3d0b4", "4588": "19db3d437787ca9c62009b56921a5af7f6fb3d8c", "4589": "5cab8b66c919ce3bacd6ed896f9955e32fe49bfc", "4592": "79f194683bdf2f1b69c5e5e2bee71e768a3a520c", "4595": "aa0b0a7696a64995e15b7c62c95936f133c5ca0e", "4596": "12aaa625518e24738c7f985a4dc29351a01a5478", "4600": "85a75bc47ead512b2f4fb85370489c9169d5f467", "4601": "badb2f7e1e2cb38ca7eac4c51391c8c520f6cecc", "4602": "f94c426baf417045f665ba9f647f07bdcda38ada", "4605": "1ace9e890aefce87d19173a2683e39d4f957846f", "4607": "af0151d0d9e0b011dc3e421c3b39715c874d03f1", "4608": "5e779a1efef7ac8a741dd2ae386da9a5839b83d7", "4609": "c641acd1adcd976c3327d7d1d955d0da7f6af811", "4611": "e8381290cd22a3be32ef4c81dbcc38bb208f0f6e", "4615": "86b3e7863251f6814d8f8efdd49489b626b01d73", "4616": "670305a3f2cb2aaf19623360ab0c76b9d27e547a", "4619": "570e605cba444fa65ef478803cce63fde41a36fd", "4625": "3a2656a032236681aee9c99b27fd021be0ec0bb2", "4634": "c9cd282dfee41e63701144d1e202c3eb7ac1a9f2", "4645": "7466ae5aff60f39761093110f103f17da299296b", "4647": "e4953447727818f2d9cdd25607b0f9199f18dc4e", "4654": "a3aea3f367b9ad0e9bafb83db4f95e8126c9ff55", "4660": "923754ba36facee9c050a684f3f6264cd81dbece", "4662": "6f00ff43c80d24432df1fda4d5ce74c535b639a1", "4664": "f2f8a5aba63feecd4079b2a8f6efdd36f710e044", "4666": "c1a42241066c352453725ac6e5861554ebd0dbd9", "4668": "d46418dcb9c70e66934f867f9ec2a083b55256c5", "4670": "d749836047794c87a83edf5180fc8db1cb8febfb", "4671": "9e25afb473a6d81e23fc1f71f618e9ee92076974", "4673": "221437f14e3e4b5f277feca0285af140607828a8", "4676": "537e19c05ce06a507a2d7ddb157dda3783a1d6cf", "4679": "9417e9c1f145be1f3317e3030d5059e8ddde22a4", "4680": "795b03107aa723d888814b504560ddbe5ff5476d", "4683": "1dd3ee4eb63f7ca425d5f32ee1fdb4c0f25801ac", "4685": "51fe08d9e05839b779a18e04f36f13814868b6f3", "4686": "55709c6ba50662bb996a0bd3dd19f7f414fafae1", "4690": "805a0f17c60a5656a042a2b0f8f20d6c0f0d5689", "4693": "922614e8f0e8ab671fad31e4cadf88dc5e1bed00", "4694": "ed585f7de0063fa28a0697efd42b9469c7ef944a", "4698": "2f7ce76a8fe1b31dc564d6b4b68de68a59f4d446", "4700": "10830bc13f2db220cbec8c3714ea352c3307e6d9", "4705": "b4545ae61b149c5090c2e7722ef48f815f771cd1", "4706": "40bc97834654a6a99c02c1bf5e33aaae9b0a3c9e", "4707": "c16a02f09087501ce9eecae2e5cbc202ce8f9cf6", "4709": "145e54272b0c3c8fc8e10ddd734f035de933c98e", "4712": "055e7a655144ef15291c690a904e14aa5abc5fb0", "4713": "4ae936cf3ed2d43a518df010cc076926abe770f8", "4715": "0284e0877e6a13db985b01c04f2ce970f0a59d1e", "4716": "5ee3b865f089e78456a2bb1537e22e5070f6c5ba", "4722": "9452b92a999e81865258148b6d46fe8c5ae6a085", "4724": "d1131144af2a2a4b3ef341613170538c808194aa", "4740": "93cebd73b1a1cacbb9d942073979488f8dc40c93", "4746": "612dbd7ec9723c66b976462d5b95c59c393a28f9", "4748": "381e1b29c7a40cdcc96252e33284b9c662795e81", "4749": "ff81007e41ec1771145adf0269dd898f89371259", "4750": "bf536066b5dcd2b8c7aaf7f27c3ab239e6ea0f10", "4751": "ff551a95fdb15f6137c28d09dc5ca89c3322cfed", "4752": "697601e9891e20ff61c31846becba67a4d36ee3b", "4754": "18340be509163dc5b61c7cf5407882fba006b6d5", "4755": "2affed7d7089259497503ef480b9f72ad66603e0", "4756": "55ef1994ac58b9c79f766a9903595764165148b7", "4760": "4bbcebeed879173a690fa6d78451e33be3d1efe3", "4763": "1e73ff22236f28e0fae1ea86fed129c8141fc0a8", "4769": "c14e71a78dd57df1b454b09cee5227c90efa3f3f", "4770": "b9e7b2f4d065af21aeb8757fabba06d0bf715e5d", "4772": "37244c2aca8a06579bd48bff88aef9afea6874d2", "4776": "89cf9defa768b79d4b63325a9f22704a367b05fc", "4781": "b443ddd1a1bd82e2635c482b272b057e4b8c0ece", "4783": "22cc3211db97084c5706411e33a8191b5ec10015", "4785": "e77e9fd8638612bd8ee2a44e51e57e087c410673", "4786": "8eefba1f9493e1d5fdd3be4760486fbbd4c508de", "4790": "2cf48d0cb59b9830f0132536272237eff708f23d", "4792": "6a5525a82e7ae177efe031814bcc778ce35d78ac", "4793": "7a2a1a7aacbf1d1c83e4523a7b65c5c08658d6e6", "4796": "89d0a3e8674769ee58572be11ab11b7704158498", "4800": "9de4798ee754155b3bc139d5f743702898748312", "4808": "f6dfa0dc7d7d121f9e4a1ab08f7b9de13ff93be7", "4809": "2d7e9bff21fb8bc7fc0f71f9578d4a544905cd94", "4813": "4c9085ad012198b63ade5afa36eb275f32580e2d", "4817": "b6e29c0d8653934c9f7b900282de17f658df9c4e", "4835": "41c7cb705486bc8d7f75cf0cfce612b2ce52dd15", "4841": "6d66bde4c7f140ba14892174c59370b2b7964e90", "4843": "796e701577be2cd52f4b39e5cd44df5c4af4295b", "4847": "bef3986a1838ca3e67b1cea4ca79004076751c77", "4851": "ad0c732e9341ad6cbade58044729cfb400091197", "4853": "ecdfe2f5f262ea52b85f10a8923dd6075727f5a0", "4855": "a8d7e4dc0b87be4c244f718722cb74e0e61ffaf0", "4858": "1622044681a6590e1b2c3efaf406d917e63c2a79", "4863": "1fe10598df5430295a8fc5cdca85cf2d9e1c4330", "4866": "973c2cf026bc5407a62094c749131e3b78ecbb15", "4867": "4fd829207a28143127a0832473c6d5e36955d151", "4871": "9c223db330666cb2aaff2f261e4c5f80deffc648", "4873": "b827ef85d39b0b6824cdd09cb08d5af4d103470a", "4874": "fba8f62f5a306dc15d79118090f28213ec4488b6", "4875": "175ad0d5722e60d93a09d2674c941eebe045ae7a", "4884": "0f2767822d12293bbad05fa4d47c59f38cdd7ea0"}, "revision_to_date": {"3515": 1555700705000, "3798": 1573292152000, "3878": 1579694518000, "3990": 1593520345000, "4120": 1601472226000, "4153": 1609335669000, "4190": 1617176515000, "4367": 1625044326000, "4523": 1633016406000, "4544": 1640904847000, "4571": 1648665920000, "4572": 1650925373000, "4576": 1651537985000, "4578": 1651949315000, "4581": 1652251377000, "4588": 1652345883000, "4589": 1652352734000, "4592": 1652373258000, "4595": 1653470015000, "4596": 1653472066000, "4600": 1656571679000, "4601": 1656572357000, "4602": 1656572607000, "4605": 1656575475000, "4607": 1656577072000, "4608": 1656578530000, "4609": 1656580907000, "4611": 1657014191000, "4615": 1657033311000, "4616": 1657031438000, "4619": 1657040846000, "4625": 1657182127000, "4634": 1657227020000, "4645": 1657383257000, "4647": 1657389611000, "4654": 1658234087000, "4660": 1660200380000, "4662": 1660328520000, "4664": 1660588692000, "4666": 1661065268000, "4668": 1661153839000, "4670": 1664192030000, "4671": 1664524884000, "4673": 1667314376000, "4676": 1667321363000, "4679": 1667396619000, "4680": 1667473087000, "4683": 1669375090000, "4685": 1670599823000, "4686": 1672482988000, "4690": 1672743019000, "4693": 1673256422000, "4694": 1673189731000, "4698": 1673985034000, "4700": 1674907259000, "4705": 1675499432000, "4706": 1675499965000, "4707": 1675502364000, "4709": 1675505938000, "4712": 1676090235000, "4713": 1676093032000, "4715": 1676129815000, "4716": 1676047807000, "4722": 1676494415000, "4724": 1676514692000, "4740": 1678585386000, "4746": 1680933737000, "4748": 1680940293000, "4749": 1681482654000, "4750": 1681504726000, "4751": 1681793307000, "4752": 1681987182000, "4754": 1683534989000, "4755": 1683538723000, "4756": 1683539284000, "4760": 1684179222000, "4763": 1684301083000, "4769": 1687341754000, "4770": 1688135834000, "4772": 1688717184000, "4776": 1688888431000, "4781": 1689688317000, "4783": 1689784101000, "4785": 1689822182000, "4786": 1690352904000, "4790": 1690363357000, "4792": 1690454451000, "4793": 1690456929000, "4796": 1692270150000, "4800": 1692618536000, "4808": 1692876727000, "4809": 1692878395000, "4813": 1693042793000, "4817": 1693064156000, "4835": 1693411163000, "4841": 1693589750000, "4843": 1694079081000, "4847": 1694199501000, "4851": 1694697548000, "4853": 1694700716000, "4855": 1694765547000, "4858": 1695156823000, "4863": 1695298731000, "4866": 1697488250000, "4867": 1697488982000, "4871": 1697578414000, "4873": 1697613573000, "4874": 1697618592000, "4875": 1697638173000, "4884": 1697886793000}, "params": {"arch": ["x86_64"], "cpu": ["AMD Ryzen 9 7950X 16-Core Processor"], "machine": ["7950x"], "num_cpu": ["32"], "os": ["Linux 6.2.0-32-generic"], "ram": ["31958208"], "python": ["3.10", "3.11", "3.7", "3.8", "3.9"], "branch": ["dev"]}, "graph_param_list": [{"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.10", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.9", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.11", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.7", "branch": "dev"}, {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "python": "3.8", "branch": "dev"}], "benchmarks": {"factor.TimeDiscreteFactor.time_copy": {"code": "class TimeDiscreteFactor:\n    def time_copy(self):\n        self.phi_large.copy()\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_copy", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "7ca18c4459ccaee8e5696e370f8bd897c1058bf2e7f975238ad8d208c0cc78d2", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_compare": {"code": "class TimeDiscreteFactor:\n    def time_factor_compare(self):\n        self.phi_large == self.phi_large\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_compare", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "95feb42df85ffe5cf519cf4af677309a5cdb891db99ad54b655196c3e1f2e13a", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_marginalize": {"code": "class TimeDiscreteFactor:\n    def time_factor_marginalize(self):\n        self.phi_large.marginalize([4, 5, 8], inplace=False)\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_marginalize", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "a3ae79cdcf3bcd4bc49df94b3b3d5f93c4126249a9b3cf2481ac381ee836f851", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_multiply_large": {"code": "class TimeDiscreteFactor:\n    def time_factor_multiply_large(self):\n        phi = self.phi_large * self.phi_large\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_multiply_large", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cfb6b66fddb2953948ffb6566ae101535dd1e8d0fd9af855331f39ef905f4450", "warmup_time": -1}, "factor.TimeDiscreteFactor.time_factor_reduce": {"code": "class TimeDiscreteFactor:\n    def time_factor_reduce(self):\n        self.phi_large.reduce([(3, 0), (6, 1)], inplace=False)\n\n    def setup(self):\n        self.phi_large = DiscreteFactor(range(10), [2] * 10, [1] * (2**10))", "min_run_count": 2, "name": "factor.TimeDiscreteFactor.time_factor_reduce", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "cb3858b638914f7572792153a60efb4aecbde56d5abf039791451adb0f26c263", "warmup_time": -1}, "import.TimeImport.timeraw_import": {"code": "class TimeImport:\n    def timeraw_import(self):\n        return \"\"\"\n        import pgmpy\n        \"\"\"", "min_run_count": 2, "name": "import.TimeImport.timeraw_import", "number": 1, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "4a5fceffe76372968cdf23cf3a5bd5329bd43241962a24d94808f6a8ae05d465", "warmup_time": -1}, "inference.TimeBeliefPropagationAlarm.peakmem_query": {"code": "class TimeBeliefPropagationAlarm:\n    def peakmem_query(self):\n        infer = BeliefPropagation(self.alarm)\n        infer.query(variables=['VENTLUNG'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')", "name": "inference.TimeBeliefPropagationAlarm.peakmem_query", "param_names": [], "params": [], "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "806e587863709d807cd37258f3e4ff6531b3af63d9b0d925dbf33820b6370d52"}, "inference.TimeBeliefPropagationAlarm.time_query": {"code": "class TimeBeliefPropagationAlarm:\n    def time_query(self):\n        infer = BeliefPropagation(self.alarm)\n        infer.query(variables=['VENTLUNG'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')", "min_run_count": 2, "name": "inference.TimeBeliefPropagationAlarm.time_query", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600, "type": "time", "unit": "seconds", "version": "8e3f583900cb7d0971387fe01fb447ac347d612b967d35c363d5ada310d67642", "warmup_time": -1}, "inference.TimeVariableEliminationAlarm.peakmem_query": {"code": "class TimeVariableEliminationAlarm:\n    def peakmem_query(self):\n        infer = VariableElimination(self.alarm)\n        infer.query(variables=['VENTLUNG', 'VENTALV', 'ARTCO2', 'CATECHOL'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')", "name": "inference.TimeVariableEliminationAlarm.peakmem_query", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "8fb7f934478692f6942ce5220952d796cac61162c04a38713da4b0d12f7350bd"}, "inference.TimeVariableEliminationAlarm.time_query": {"code": "class TimeVariableEliminationAlarm:\n    def time_query(self):\n        infer = VariableElimination(self.alarm)\n        infer.query(variables=['VENTLUNG', 'VENTALV', 'ARTCO2', 'CATECHOL'])\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')", "min_run_count": 2, "name": "inference.TimeVariableEliminationAlarm.time_query", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "9afe2f3b4ea0ac283ff7578b676d09dea08a5430b501f67adfe9031c1e8aca54", "warmup_time": -1}, "inference.TimeVariableEliminationMunin.peakmem_query": {"code": "class TimeVariableEliminationMunin:\n    def peakmem_query(self):\n        infer = VariableElimination(self.munin)\n        infer.query(variables=['L_LNLC8_ADM_MALOSS', 'L_LNLLP_ADM_MALOSS', 'L_LNLC8_LP_ADM_MALOSS', 'L_LNLE_ADM_MALOSS'])\n\n    def setup(self):\n        self.munin = get_example_model('munin')", "name": "inference.TimeVariableEliminationMunin.peakmem_query", "param_names": [], "params": [], "type": "peakmemory", "unit": "bytes", "version": "4afd10111d6652d83a2ff7af9ba1198cc44b6c1d091175f30903a1e4de59ca23"}, "inference.TimeVariableEliminationMunin.time_query": {"code": "class TimeVariableEliminationMunin:\n    def time_query(self):\n        infer = VariableElimination(self.munin)\n        infer.query(variables=['L_LNLC8_ADM_MALOSS', 'L_LNLLP_ADM_MALOSS', 'L_LNLC8_LP_ADM_MALOSS', 'L_LNLE_ADM_MALOSS'])\n\n    def setup(self):\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "inference.TimeVariableEliminationMunin.time_query", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "d57459b698fe6d68c4ed61ca0a9050ca2165542cbe239d1fde792877c82de579", "warmup_time": -1}, "parameter_learning.TimeBayesianEstimatorAlarm.peakmem_bayesian_estimator": {"code": "class TimeBayesianEstimatorAlarm:\n    def peakmem_bayesian_estimator(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = BayesianEstimator(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est", "name": "parameter_learning.TimeBayesianEstimatorAlarm.peakmem_bayesian_estimator", "param_names": [], "params": [], "setup_cache_key": "parameter_learning:54", "timeout": 1200, "type": "peakmemory", "unit": "bytes", "version": "8103bf7611442ed58b0633047d074115803c2c49a1cd67f9782207cdeb00962a"}, "parameter_learning.TimeBayesianEstimatorAlarm.time_bayesian_estimator": {"code": "class TimeBayesianEstimatorAlarm:\n    def time_bayesian_estimator(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = BayesianEstimator(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est", "min_run_count": 2, "name": "parameter_learning.TimeBayesianEstimatorAlarm.time_bayesian_estimator", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "parameter_learning:54", "timeout": 1200, "type": "time", "unit": "seconds", "version": "43e253549c98371fb34d953f359f6127f74d02e42c3df8f50b40bfea962e0a71", "warmup_time": -1}, "parameter_learning.TimeBayesianEstimatorMunin.peakmem_bayesian_estimator": {"code": "class TimeBayesianEstimatorMunin:\n    def peakmem_bayesian_estimator(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = BayesianEstimator(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est", "name": "parameter_learning.TimeBayesianEstimatorMunin.peakmem_bayesian_estimator", "param_names": [], "params": [], "setup_cache_key": "parameter_learning:75", "timeout": 1200, "type": "peakmemory", "unit": "bytes", "version": "eef0a484d21f3a7f699627dba7a50889c85bed3a5cfae8c06a6dfc31381ef58d"}, "parameter_learning.TimeBayesianEstimatorMunin.time_bayesian_estimator": {"code": "class TimeBayesianEstimatorMunin:\n    def time_bayesian_estimator(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = BayesianEstimator(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est", "min_run_count": 2, "name": "parameter_learning.TimeBayesianEstimatorMunin.time_bayesian_estimator", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "parameter_learning:75", "timeout": 1200, "type": "time", "unit": "seconds", "version": "656c5d2cb79145a0b57483e967bc872f28aae8937ddd5976917b16ef955d63a8", "warmup_time": -1}, "parameter_learning.TimeExpectationMaximizationAlarm.peakmem_em": {"code": "class TimeExpectationMaximizationAlarm:\n    def peakmem_em(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = ExpectationMaximization(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est", "name": "parameter_learning.TimeExpectationMaximizationAlarm.peakmem_em", "param_names": [], "params": [], "setup_cache_key": "parameter_learning:96", "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "5d1d59f1f524a27d3aa26e5fc5a79a31f521da138b23831fbdd615de5834db4e"}, "parameter_learning.TimeExpectationMaximizationAlarm.time_em": {"code": "class TimeExpectationMaximizationAlarm:\n    def time_em(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        self.alarm_est = ExpectationMaximization(alarm_model, alarm.simulate(int(1e3)))\n        return self.alarm_est", "min_run_count": 2, "name": "parameter_learning.TimeExpectationMaximizationAlarm.time_em", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "parameter_learning:96", "timeout": 600, "type": "time", "unit": "seconds", "version": "dd5f2e83cd4d8358cc03b52caf219ace400ec1756ceef94d3b944f3e1949b0ff", "warmup_time": -1}, "parameter_learning.TimeExpectationMaximizationMunin.peakmem_em": {"code": "class TimeExpectationMaximizationMunin:\n    def peakmem_em(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = ExpectationMaximization(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est", "name": "parameter_learning.TimeExpectationMaximizationMunin.peakmem_em", "param_names": [], "params": [], "setup_cache_key": "parameter_learning:117", "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "0688a957fbfa0891c74c271716cd4aea4a94fd1fd698fd16c02f1709d61d3633"}, "parameter_learning.TimeExpectationMaximizationMunin.time_em": {"code": "class TimeExpectationMaximizationMunin:\n    def time_em(self, est):\n        est.get_parameters()\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        self.munin_est = ExpectationMaximization(munin_model, munin.simulate(int(1e3)))\n        return self.munin_est", "min_run_count": 2, "name": "parameter_learning.TimeExpectationMaximizationMunin.time_em", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "parameter_learning:117", "timeout": 600, "type": "time", "unit": "seconds", "version": "1d3479b16c58a55220ffbfe8173bd4e10b0022339b41753c66ff4d97f684c922", "warmup_time": -1}, "parameter_learning.TimeMLEAlarm.peakmem_mle": {"code": "class TimeMLEAlarm:\n    def peakmem_mle(self, alarm_est):\n        alarm_est.get_parameters()\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        return MaximumLikelihoodEstimator(alarm_model, alarm.simulate(int(1e3)))", "name": "parameter_learning.TimeMLEAlarm.peakmem_mle", "param_names": [], "params": [], "setup_cache_key": "parameter_learning:14", "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "28640c8d7f1d1c9739ac73f9fb14315eb27f83786768cde7ae2e80a0c7c71b77"}, "parameter_learning.TimeMLEAlarm.time_mle": {"code": "class TimeMLEAlarm:\n    def time_mle(self, alarm_est):\n        alarm_est.get_parameters()\n\n    def setup_cache(self):\n        alarm = get_example_model('alarm')\n        alarm_model = BayesianNetwork(alarm.edges())\n        return MaximumLikelihoodEstimator(alarm_model, alarm.simulate(int(1e3)))", "min_run_count": 2, "name": "parameter_learning.TimeMLEAlarm.time_mle", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "parameter_learning:14", "timeout": 600, "type": "time", "unit": "seconds", "version": "61297dda6c2decd7ebe3e980bdc422df663eab215748f4e960c279958e031808", "warmup_time": -1}, "parameter_learning.TimeMLEMunin.peakmem_mle": {"code": "class TimeMLEMunin:\n    def peakmem_mle(self, munin_est):\n        munin_est.get_parameters()\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        return MaximumLikelihoodEstimator(munin_model, munin.simulate(int(1e3)))", "name": "parameter_learning.TimeMLEMunin.peakmem_mle", "param_names": [], "params": [], "setup_cache_key": "parameter_learning:34", "timeout": 600, "type": "peakmemory", "unit": "bytes", "version": "569a9f69ec6e83318c016bd585130287b2c47dd1c1b29cea0a35816426ce90ee"}, "parameter_learning.TimeMLEMunin.time_mle": {"code": "class TimeMLEMunin:\n    def time_mle(self, munin_est):\n        munin_est.get_parameters()\n\n    def setup_cache(self):\n        munin = get_example_model('munin')\n        munin_model = BayesianNetwork(munin.edges())\n        return MaximumLikelihoodEstimator(munin_model, munin.simulate(int(1e3)))", "min_run_count": 2, "name": "parameter_learning.TimeMLEMunin.time_mle", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 2, "sample_time": 0.01, "setup_cache_key": "parameter_learning:34", "timeout": 600, "type": "time", "unit": "seconds", "version": "fc513ee01cd683dcf22ddd1b64a44b6be9eab3d672b9eb0486799ef9a848c05c", "warmup_time": -1}, "readwrite.TimeReadAlarm.time_read": {"code": "class TimeReadAlarm:\n    def time_read(self):\n        get_example_model('alarm')\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')", "min_run_count": 2, "name": "readwrite.TimeReadAlarm.time_read", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "946382cb51c56be8e4d3dbdcb8fa7655ca535ca6f40179086c8045679fbc5f4a", "warmup_time": -1}, "readwrite.TimeReadAlarm.time_write": {"code": "class TimeReadAlarm:\n    def time_write(self):\n        BIFWriter(self.alarm).write_bif('\\tmp')\n\n    def setup(self):\n        self.alarm = get_example_model('alarm')", "min_run_count": 2, "name": "readwrite.TimeReadAlarm.time_write", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "44d8fb06a598d3610e3830fbb316a05c3e38a350a752123c1b68a2426ae92b6c", "warmup_time": -1}, "readwrite.TimeReadMunin.time_read": {"code": "class TimeReadMunin:\n    def time_read(self):\n        get_example_model('munin')\n\n    def setup(self):\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "readwrite.TimeReadMunin.time_read", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "09c11b75db429e36ed7e59f7f1d78748696673e8e6f2e280bda39960c9586808", "warmup_time": -1}, "readwrite.TimeReadMunin.time_write": {"code": "class TimeReadMunin:\n    def time_write(self):\n        BIFWriter(self.munin).write_bif('\\tmp')\n\n    def setup(self):\n        self.munin = get_example_model('munin')", "min_run_count": 2, "name": "readwrite.TimeReadMunin.time_write", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "type": "time", "unit": "seconds", "version": "bd102a3c9bf11bc43cc7d5afb3e20fb9890a0f792e1a3d4e1de8e6d4d811ecf1", "warmup_time": -1}, "sampling.TimeSamplingAlarm.time_forward_sample": {"code": "class TimeSamplingAlarm:\n    def time_forward_sample(self):\n        self.model.simulate(n_samples=int(1e3), show_progress=False)\n\n    def setup(self):\n        self.model = get_example_model('alarm')", "min_run_count": 2, "name": "sampling.TimeSamplingAlarm.time_forward_sample", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600.0, "type": "time", "unit": "seconds", "version": "7dfc365fea40a762ce478b49241cb30b8af2bb8cc33758b7181999acfaf3e986", "warmup_time": -1}, "sampling.TimeSamplingMunin.time_forward_sample": {"code": "class TimeSamplingMunin:\n    def time_forward_sample(self):\n        self.model.simulate(n_samples=int(1e3), show_progress=False)\n\n    def setup(self):\n        self.model = get_example_model('munin')", "min_run_count": 2, "name": "sampling.TimeSamplingMunin.time_forward_sample", "number": 0, "param_names": [], "params": [], "repeat": 0, "rounds": 2, "sample_time": 0.01, "timeout": 600.0, "type": "time", "unit": "seconds", "version": "e357daa15dc8a030427286d9d8e9907287182d3040001400f35013207157cab2", "warmup_time": -1}, "structure_learning.TimeHillClimbAlarm.time_hillclimb": {"code": "class TimeHillClimbAlarm:\n    def time_hillclimb(self):\n        self.est.estimate(max_indegree=4, scoring_method=self.scoring_method, max_iter=int(1e3))\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.scoring_method = K2Score(samples)\n        self.est = HillClimbSearch(data=samples)", "min_run_count": 2, "name": "structure_learning.TimeHillClimbAlarm.time_hillclimb", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "timeout": 1200.0, "type": "time", "unit": "seconds", "version": "e9bb677cc8e0b9733d0f7d3b2fea82ec7ed1e46df6efc66c9260d9438a9590aa", "warmup_time": -1}, "structure_learning.TimeHillClimbMunin.time_hillclimb": {"code": "class TimeHillClimbMunin:\n    def time_hillclimb(self):\n        self.est.estimate(max_indegree=4, scoring_method=self.scoring_method, max_iter=int(1e2))\n\n    def setup(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.scoring_method = K2Score(samples)\n        self.est = HillClimbSearch(data=samples)", "min_run_count": 2, "name": "structure_learning.TimeHillClimbMunin.time_hillclimb", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "timeout": 1200.0, "type": "time", "unit": "seconds", "version": "e143c5f9ec35fb62e9603f378cdb8a578251244e22d40d20298752c277d67dd9", "warmup_time": -1}, "structure_learning.TimePCAlarm.time_pc_orig": {"code": "class TimePCAlarm:\n    def time_pc_orig(self, est):\n        est.estimate(variant='orig', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est", "min_run_count": 2, "name": "structure_learning.TimePCAlarm.time_pc_orig", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "structure_learning:15", "timeout": 1200.0, "type": "time", "unit": "seconds", "version": "5e523c915e22708031dc4d21f07e0d7f440f887a9db2d13e59dc33a6497527a5", "warmup_time": -1}, "structure_learning.TimePCAlarm.time_pc_parallel": {"code": "class TimePCAlarm:\n    def time_pc_parallel(self, est):\n        est.estimate(variant='parallel', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est", "min_run_count": 2, "name": "structure_learning.TimePCAlarm.time_pc_parallel", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "structure_learning:15", "timeout": 1200.0, "type": "time", "unit": "seconds", "version": "e32a7db7882051bcbeec5a9c58250f1796d26d012af8ae90f9bc6924f0878eca", "warmup_time": -1}, "structure_learning.TimePCAlarm.time_pc_stable": {"code": "class TimePCAlarm:\n    def time_pc_stable(self, est):\n        est.estimate(variant='stable', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est", "min_run_count": 2, "name": "structure_learning.TimePCAlarm.time_pc_stable", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "structure_learning:15", "timeout": 1200.0, "type": "time", "unit": "seconds", "version": "ed5b40b7827deb2bdd11f9ce2610766add3b2dea104afc9312da66f614187ff1", "warmup_time": -1}, "structure_learning.TimePCMunin.time_pc_orig": {"code": "class TimePCMunin:\n    def time_pc_orig(self, est):\n        est.estimate(variant='orig', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est", "min_run_count": 2, "name": "structure_learning.TimePCMunin.time_pc_orig", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "structure_learning:40", "timeout": 1800.0, "type": "time", "unit": "seconds", "version": "70dd19e592c5f6001d51db73baa84155eb754f82996ae90a7e9a19b7ce0ae935", "warmup_time": -1}, "structure_learning.TimePCMunin.time_pc_parallel": {"code": "class TimePCMunin:\n    def time_pc_parallel(self, est):\n        est.estimate(variant='parallel', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est", "min_run_count": 2, "name": "structure_learning.TimePCMunin.time_pc_parallel", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "structure_learning:40", "timeout": 1800.0, "type": "time", "unit": "seconds", "version": "18e1dfe8cd5f6d4555c5664d4bd180725f5a22b57ff2e9dfb1b58e0e45f1f65b", "warmup_time": -1}, "structure_learning.TimePCMunin.time_pc_stable": {"code": "class TimePCMunin:\n    def time_pc_stable(self, est):\n        est.estimate(variant='stable', max_cond_vars=3)\n\n    def setup_cache(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), seed=42, show_progress=False)\n        self.est = PC(samples)\n        return self.est", "min_run_count": 2, "name": "structure_learning.TimePCMunin.time_pc_stable", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "setup_cache_key": "structure_learning:40", "timeout": 1800.0, "type": "time", "unit": "seconds", "version": "505c6a7c89f7358cedba7f4374e88f26bd6ee528c050c30343479e5d56d2e97c", "warmup_time": -1}, "structure_learning.TimeTreeSearchAlarm.time_tan": {"code": "class TimeTreeSearchAlarm:\n    def time_tan(self):\n        self.est.estimate(estimator_type=\"tan\", class_node=\"HISTORY\", show_progress=False)\n\n    def setup(self):\n        model = get_example_model('alarm')\n        samples = model.simulate(n_samples=int(1e3), show_progress=False)\n        self.est = TreeSearch(samples)", "min_run_count": 2, "name": "structure_learning.TimeTreeSearchAlarm.time_tan", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "timeout": 1200.0, "type": "time", "unit": "seconds", "version": "5a54729327706fe11df41038786e96f8c597a0ea19bb2f0467ba608d2d6d8ddc", "warmup_time": -1}, "structure_learning.TimeTreeSearchMunin.time_tan": {"code": "class TimeTreeSearchMunin:\n    def time_tan(self):\n        self.est.estimate(estimator_type=\"tan\", class_node=\"R_LNLW_APB_MALOSS\", show_progress=False)\n\n    def setup(self):\n        model = get_example_model('munin1')\n        samples = model.simulate(n_samples=int(1e3), show_progress=False)\n        self.est = TreeSearch(samples)", "min_run_count": 2, "name": "structure_learning.TimeTreeSearchMunin.time_tan", "number": 1, "param_names": [], "params": [], "repeat": 1, "rounds": 1, "sample_time": 0.01, "timeout": 1200.0, "type": "time", "unit": "seconds", "version": "9900c99141f5439a2525d33cbe7f09bb0a63ae6b7d7ad9ea1834c5385fde74f2", "warmup_time": -1}}, "machines": {"7950x": {"arch": "x86_64", "cpu": "AMD Ryzen 9 7950X 16-Core Processor", "machine": "7950x", "num_cpu": "32", "os": "Linux 6.2.0-32-generic", "ram": "31958208", "version": 1}}, "tags": {"v0.1.8": 3515, "v0.1.9": 3798, "v0.1.10": 3878, "v0.1.11": 3990, "v0.1.12": 4120, "v0.1.13": 4153, "v0.1.14": 4190, "v0.1.15": 4367, "v0.1.16": 4523, "v0.1.17": 4544, "v0.1.18": 4571, "v0.1.19": 4609, "v0.1.20": 4671, "v0.1.21": 4686, "v0.1.22": 4746, "v0.1.23": 4770, "v0.1.24": 4867}, "pages": [["", "Grid view", "Display as a agrid"], ["summarylist", "List view", "Display as a list"], ["regressions", "Show regressions", "Display information about recent regressions"]]}